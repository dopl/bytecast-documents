
a.out:     file format elf64-x86-64


Disassembly of section .init:

00000000004003b8 <_init>:
  4003b8:	48 83 ec 08          	sub    $0x8,%rsp
  4003bc:	e8 6b 00 00 00       	callq  40042c <call_gmon_start>
  4003c1:	e8 fa 00 00 00       	callq  4004c0 <frame_dummy>
  4003c6:	e8 85 02 00 00       	callq  400650 <__do_global_ctors_aux>
  4003cb:	48 83 c4 08          	add    $0x8,%rsp
  4003cf:	c3                   	retq   

Disassembly of section .plt:

00000000004003d0 <printf@plt-0x10>:
  4003d0:	ff 35 d2 05 20 00    	pushq  0x2005d2(%rip)        # 6009a8 <_GLOBAL_OFFSET_TABLE_+0x8>
  4003d6:	ff 25 d4 05 20 00    	jmpq   *0x2005d4(%rip)        # 6009b0 <_GLOBAL_OFFSET_TABLE_+0x10>
  4003dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004003e0 <printf@plt>:
  4003e0:	ff 25 d2 05 20 00    	jmpq   *0x2005d2(%rip)        # 6009b8 <_GLOBAL_OFFSET_TABLE_+0x18>
  4003e6:	68 00 00 00 00       	pushq  $0x0
  4003eb:	e9 e0 ff ff ff       	jmpq   4003d0 <_init+0x18>

00000000004003f0 <__libc_start_main@plt>:
  4003f0:	ff 25 ca 05 20 00    	jmpq   *0x2005ca(%rip)        # 6009c0 <_GLOBAL_OFFSET_TABLE_+0x20>
  4003f6:	68 01 00 00 00       	pushq  $0x1
  4003fb:	e9 d0 ff ff ff       	jmpq   4003d0 <_init+0x18>

Disassembly of section .text:

0000000000400400 <_start>:
  400400:	31 ed                	xor    %ebp,%ebp
  400402:	49 89 d1             	mov    %rdx,%r9
  400405:	5e                   	pop    %rsi
  400406:	48 89 e2             	mov    %rsp,%rdx
  400409:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40040d:	50                   	push   %rax
  40040e:	54                   	push   %rsp
  40040f:	49 c7 c0 b0 05 40 00 	mov    $0x4005b0,%r8
  400416:	48 c7 c1 c0 05 40 00 	mov    $0x4005c0,%rcx
  40041d:	48 c7 c7 42 05 40 00 	mov    $0x400542,%rdi
  400424:	e8 c7 ff ff ff       	callq  4003f0 <__libc_start_main@plt>
  400429:	f4                   	hlt    
  40042a:	90                   	nop
  40042b:	90                   	nop

000000000040042c <call_gmon_start>:
  40042c:	48 83 ec 08          	sub    $0x8,%rsp
  400430:	48 8b 05 61 05 20 00 	mov    0x200561(%rip),%rax        # 600998 <_DYNAMIC+0x1a0>
  400437:	48 85 c0             	test   %rax,%rax
  40043a:	74 02                	je     40043e <call_gmon_start+0x12>
  40043c:	ff d0                	callq  *%rax
  40043e:	48 83 c4 08          	add    $0x8,%rsp
  400442:	c3                   	retq   
  400443:	90                   	nop
  400444:	90                   	nop
  400445:	90                   	nop
  400446:	90                   	nop
  400447:	90                   	nop
  400448:	90                   	nop
  400449:	90                   	nop
  40044a:	90                   	nop
  40044b:	90                   	nop
  40044c:	90                   	nop
  40044d:	90                   	nop
  40044e:	90                   	nop
  40044f:	90                   	nop

0000000000400450 <__do_global_dtors_aux>:
  400450:	55                   	push   %rbp
  400451:	48 89 e5             	mov    %rsp,%rbp
  400454:	53                   	push   %rbx
  400455:	48 83 ec 08          	sub    $0x8,%rsp
  400459:	80 3d 78 05 20 00 00 	cmpb   $0x0,0x200578(%rip)        # 6009d8 <__bss_start>
  400460:	75 4b                	jne    4004ad <__do_global_dtors_aux+0x5d>
  400462:	bb e8 07 60 00       	mov    $0x6007e8,%ebx
  400467:	48 8b 05 72 05 20 00 	mov    0x200572(%rip),%rax        # 6009e0 <dtor_idx.6343>
  40046e:	48 81 eb e0 07 60 00 	sub    $0x6007e0,%rbx
  400475:	48 c1 fb 03          	sar    $0x3,%rbx
  400479:	48 83 eb 01          	sub    $0x1,%rbx
  40047d:	48 39 d8             	cmp    %rbx,%rax
  400480:	73 24                	jae    4004a6 <__do_global_dtors_aux+0x56>
  400482:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  400488:	48 83 c0 01          	add    $0x1,%rax
  40048c:	48 89 05 4d 05 20 00 	mov    %rax,0x20054d(%rip)        # 6009e0 <dtor_idx.6343>
  400493:	ff 14 c5 e0 07 60 00 	callq  *0x6007e0(,%rax,8)
  40049a:	48 8b 05 3f 05 20 00 	mov    0x20053f(%rip),%rax        # 6009e0 <dtor_idx.6343>
  4004a1:	48 39 d8             	cmp    %rbx,%rax
  4004a4:	72 e2                	jb     400488 <__do_global_dtors_aux+0x38>
  4004a6:	c6 05 2b 05 20 00 01 	movb   $0x1,0x20052b(%rip)        # 6009d8 <__bss_start>
  4004ad:	48 83 c4 08          	add    $0x8,%rsp
  4004b1:	5b                   	pop    %rbx
  4004b2:	c9                   	leaveq 
  4004b3:	c3                   	retq   
  4004b4:	66 66 66 2e 0f 1f 84 	nopw   %cs:0x0(%rax,%rax,1)
  4004bb:	00 00 00 00 00 

00000000004004c0 <frame_dummy>:
  4004c0:	55                   	push   %rbp
  4004c1:	48 83 3d 27 03 20 00 	cmpq   $0x0,0x200327(%rip)        # 6007f0 <__JCR_END__>
  4004c8:	00 
  4004c9:	48 89 e5             	mov    %rsp,%rbp
  4004cc:	74 12                	je     4004e0 <frame_dummy+0x20>
  4004ce:	b8 00 00 00 00       	mov    $0x0,%eax
  4004d3:	48 85 c0             	test   %rax,%rax
  4004d6:	74 08                	je     4004e0 <frame_dummy+0x20>
  4004d8:	bf f0 07 60 00       	mov    $0x6007f0,%edi
  4004dd:	c9                   	leaveq 
  4004de:	ff e0                	jmpq   *%rax
  4004e0:	c9                   	leaveq 
  4004e1:	c3                   	retq   
  4004e2:	90                   	nop
  4004e3:	90                   	nop

00000000004004e4 <sum>:
#include <stdio.h>

int sum(int a, int b)
{
  4004e4:	55                   	push   %rbp
  4004e5:	48 89 e5             	mov    %rsp,%rbp
  4004e8:	89 7d fc             	mov    %edi,-0x4(%rbp)
  4004eb:	89 75 f8             	mov    %esi,-0x8(%rbp)
	return a + b;
  4004ee:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4004f1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4004f4:	8d 04 02             	lea    (%rdx,%rax,1),%eax
}
  4004f7:	c9                   	leaveq 
  4004f8:	c3                   	retq   

00000000004004f9 <halve>:
int halve(int a)
{
  4004f9:	55                   	push   %rbp
  4004fa:	48 89 e5             	mov    %rsp,%rbp
  4004fd:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return a/2;
  400500:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400503:	89 c2                	mov    %eax,%edx
  400505:	c1 ea 1f             	shr    $0x1f,%edx
  400508:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  40050b:	d1 f8                	sar    %eax
}
  40050d:	c9                   	leaveq 
  40050e:	c3                   	retq   

000000000040050f <dostuff>:
int dostuff(int a, int b)
{
  40050f:	55                   	push   %rbp
  400510:	48 89 e5             	mov    %rsp,%rbp
  400513:	48 83 ec 08          	sub    $0x8,%rsp
  400517:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40051a:	89 75 f8             	mov    %esi,-0x8(%rbp)
	if(a < b)
  40051d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400520:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  400523:	7d 11                	jge    400536 <dostuff+0x27>
		return sum(a,b);
  400525:	8b 55 f8             	mov    -0x8(%rbp),%edx
  400528:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40052b:	89 d6                	mov    %edx,%esi
  40052d:	89 c7                	mov    %eax,%edi
  40052f:	e8 b0 ff ff ff       	callq  4004e4 <sum>
  400534:	eb 0a                	jmp    400540 <dostuff+0x31>
	else
		return halve(a);
  400536:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400539:	89 c7                	mov    %eax,%edi
  40053b:	e8 b9 ff ff ff       	callq  4004f9 <halve>
}
  400540:	c9                   	leaveq 
  400541:	c3                   	retq   

0000000000400542 <main>:

int main(int argc, char* argv[])
{
  400542:	55                   	push   %rbp
  400543:	48 89 e5             	mov    %rsp,%rbp
  400546:	48 83 ec 20          	sub    $0x20,%rsp
  40054a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  40054d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if(argc == 3){
  400551:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  400555:	75 4c                	jne    4005a3 <main+0x61>
		int ret = dostuff((int)argv[1][0],(int)argv[2][0]);
  400557:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40055b:	48 83 c0 10          	add    $0x10,%rax
  40055f:	48 8b 00             	mov    (%rax),%rax
  400562:	0f b6 00             	movzbl (%rax),%eax
  400565:	0f be d0             	movsbl %al,%edx
  400568:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40056c:	48 83 c0 08          	add    $0x8,%rax
  400570:	48 8b 00             	mov    (%rax),%rax
  400573:	0f b6 00             	movzbl (%rax),%eax
  400576:	0f be c0             	movsbl %al,%eax
  400579:	89 d6                	mov    %edx,%esi
  40057b:	89 c7                	mov    %eax,%edi
  40057d:	e8 8d ff ff ff       	callq  40050f <dostuff>
  400582:	89 45 fc             	mov    %eax,-0x4(%rbp)
		printf("The value is %d\n", ret);
  400585:	b8 9c 06 40 00       	mov    $0x40069c,%eax
  40058a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40058d:	89 d6                	mov    %edx,%esi
  40058f:	48 89 c7             	mov    %rax,%rdi
  400592:	b8 00 00 00 00       	mov    $0x0,%eax
  400597:	e8 44 fe ff ff       	callq  4003e0 <printf@plt>
	}
	else{
		return 1;
	}
	return 0;
  40059c:	b8 00 00 00 00       	mov    $0x0,%eax
  4005a1:	eb 05                	jmp    4005a8 <main+0x66>
	if(argc == 3){
		int ret = dostuff((int)argv[1][0],(int)argv[2][0]);
		printf("The value is %d\n", ret);
	}
	else{
		return 1;
  4005a3:	b8 01 00 00 00       	mov    $0x1,%eax
	}
	return 0;
}
  4005a8:	c9                   	leaveq 
  4005a9:	c3                   	retq   
  4005aa:	90                   	nop
  4005ab:	90                   	nop
  4005ac:	90                   	nop
  4005ad:	90                   	nop
  4005ae:	90                   	nop
  4005af:	90                   	nop

00000000004005b0 <__libc_csu_fini>:
  4005b0:	f3 c3                	repz retq 
  4005b2:	66 66 66 66 66 2e 0f 	nopw   %cs:0x0(%rax,%rax,1)
  4005b9:	1f 84 00 00 00 00 00 

00000000004005c0 <__libc_csu_init>:
  4005c0:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  4005c5:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  4005ca:	48 8d 2d fb 01 20 00 	lea    0x2001fb(%rip),%rbp        # 6007cc <__init_array_end>
  4005d1:	4c 8d 25 f4 01 20 00 	lea    0x2001f4(%rip),%r12        # 6007cc <__init_array_end>
  4005d8:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  4005dd:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  4005e2:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  4005e7:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  4005ec:	48 83 ec 38          	sub    $0x38,%rsp
  4005f0:	4c 29 e5             	sub    %r12,%rbp
  4005f3:	41 89 fd             	mov    %edi,%r13d
  4005f6:	49 89 f6             	mov    %rsi,%r14
  4005f9:	48 c1 fd 03          	sar    $0x3,%rbp
  4005fd:	49 89 d7             	mov    %rdx,%r15
  400600:	e8 b3 fd ff ff       	callq  4003b8 <_init>
  400605:	48 85 ed             	test   %rbp,%rbp
  400608:	74 1c                	je     400626 <__libc_csu_init+0x66>
  40060a:	31 db                	xor    %ebx,%ebx
  40060c:	0f 1f 40 00          	nopl   0x0(%rax)
  400610:	4c 89 fa             	mov    %r15,%rdx
  400613:	4c 89 f6             	mov    %r14,%rsi
  400616:	44 89 ef             	mov    %r13d,%edi
  400619:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40061d:	48 83 c3 01          	add    $0x1,%rbx
  400621:	48 39 eb             	cmp    %rbp,%rbx
  400624:	72 ea                	jb     400610 <__libc_csu_init+0x50>
  400626:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40062b:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  400630:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  400635:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  40063a:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  40063f:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  400644:	48 83 c4 38          	add    $0x38,%rsp
  400648:	c3                   	retq   
  400649:	90                   	nop
  40064a:	90                   	nop
  40064b:	90                   	nop
  40064c:	90                   	nop
  40064d:	90                   	nop
  40064e:	90                   	nop
  40064f:	90                   	nop

0000000000400650 <__do_global_ctors_aux>:
  400650:	55                   	push   %rbp
  400651:	48 89 e5             	mov    %rsp,%rbp
  400654:	53                   	push   %rbx
  400655:	48 83 ec 08          	sub    $0x8,%rsp
  400659:	48 8b 05 70 01 20 00 	mov    0x200170(%rip),%rax        # 6007d0 <__CTOR_LIST__>
  400660:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  400664:	74 19                	je     40067f <__do_global_ctors_aux+0x2f>
  400666:	bb d0 07 60 00       	mov    $0x6007d0,%ebx
  40066b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  400670:	48 83 eb 08          	sub    $0x8,%rbx
  400674:	ff d0                	callq  *%rax
  400676:	48 8b 03             	mov    (%rbx),%rax
  400679:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  40067d:	75 f1                	jne    400670 <__do_global_ctors_aux+0x20>
  40067f:	48 83 c4 08          	add    $0x8,%rsp
  400683:	5b                   	pop    %rbx
  400684:	c9                   	leaveq 
  400685:	c3                   	retq   
  400686:	90                   	nop
  400687:	90                   	nop

Disassembly of section .fini:

0000000000400688 <_fini>:
  400688:	48 83 ec 08          	sub    $0x8,%rsp
  40068c:	e8 bf fd ff ff       	callq  400450 <__do_global_dtors_aux>
  400691:	48 83 c4 08          	add    $0x8,%rsp
  400695:	c3                   	retq   
